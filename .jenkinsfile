// ### Environment ###
properties([
	parameters([
		string(name:"SBA_VERSION",  defaultValue: "", description: "version of sba", trim: true),
		string(name:"SBA_NODE",    defaultValue: "${env.SBA_NODE}", description: "execution node name", trim: true)
	]),
	disableConcurrentBuilds()
])

// Get mail parameters from jenkins env vars
url           = "${env.NPM_SERVER_URL}"
npm_user      = "${env.NPM_USER}"
npm_pass      = "${env.NPM_PASS}"
npm_mail      = "${env.NPM_MAIL}"
mailto        = "${env.NPM_MAILING_LIST}"

// get job variables from job parameters
sba_version   = "${params.SBA_VERSION}"
sba_app_list  = "${params.SBA_APP_LIST}"
pkg_suffix    = "-DEV"
sba_tag       = ""
tag_prefix    = "rel_"

// .npmrc variables for verdaccio connection
scope  = "@sinequa"
fnpmrc = '.npmrc'
anpmrc = ["always-auth=true", "registry=${url}/", "scope=${scope}", "scripts-prepend-node-path=true"]


// run job on a specific node if needed
node (params.SBA_NODE) {
	currentBuild.result = "SUCCESS"
	// if param sba_version is not null, the call comes from sba-internal
	def modeCallFromSbaInternal = false
	if (sba_version.length() > 0) {
		echo "SBA_VERSION should comming from build of sba-internal"
		modeCallFromSbaInternal = true
	}
	
	try {

		// get the source code
		checkout scm

		// load jenkins functions
		def rootDir = pwd()
		def jf = load "${rootDir}/.jenkins_function.groovy"
		// get the branch name
		def myBranch = jf.getBranch()

		// get the npm path 
		// remove npm path comming from ice
		bat "if exist .\\ice ( rmdir /s /q .\\ice )"
		// get node executable for the branch
		jf.getIceNode(myBranch)
		// get the npm path
		myNPM = jf.getNPMpath("npm.cmd")
		// A path must be found to do something
		if (myNPM == "" ) {
			currentBuild.result = "FAILURE"
			throw err
		}
		println "npm.cmd used (${myBranch}): ${myNPM}"
		println "Version: "
		bat "@call ${myNPM} -v"
		
		stage('Clean') {
			// delete dependency modules
			def nmfolder = "node_modules"
			echo ".Rmdir /s /q ${nmfolder}"
			bat "if exist ${nmfolder} ( rmdir /s /q ${nmfolder} )"
			
			// clean the npm cache
			echo ".Cache clean force"
			bat "@call ${myNPM} cache clean --force"
		}

		stage('Create user') {
			// create user for verdaccio
			bat "npm-cli-login -u ${npm_user} -p ${npm_pass} -e ${npm_mail} -r ${url} -s ${scope} --config-path ${fnpmrc}"
			// add connection infos in .npmrc file
			jf.appendFile(fnpmrc, anpmrc)
			// check the connection
			bat "@call ${myNPM} whoami"
		}
		
		// Validate app fired
		if (modeCallFromSbaInternal) {
			// Validate app fired on merge event
			stage('Update package') {
				// update package.json with version
				jf.updatePackage(sba_version)
			}
		}
		
		// install dependencies, fallback to official registry
		// and retry if get on internal repo fails
		stage('NPM Install') {
			echo "npm install"
			def ret = bat (script: "${myNPM} install", returnStatus: true)
			if (ret) {
				// set .npmrc file as original
				// check registry
				// install again
				bat """
				  echo "----------"
				  echo "restore .npmrc file"
				  call git restore .npmrc
				  echo "verify the registry"
				  call ${myNPM} config get registry
				  echo "${myNPM} install again"
				  call ${myNPM} install
				"""
			}
		}
		
		// Build the app started on commit event
		stage('Build') {
			echo "${myNPM} run build --if-present"
			bat  "@call ${myNPM} run build --if-present"
		}
		
	} catch (err) {
		currentBuild.result = "FAILURE"
		throw err
	} finally {
		// should no be blocker
		if ( modeCallFromSbaInternal && (currentBuild.result == "FAILURE")) {
			currentBuild.result = "UNSTABLE"
		}
	}
}
