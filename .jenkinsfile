// ### Environment ###
properties([
	parameters([
		string(name:"SBA_VERSION",  defaultValue: "", description: "version of sba", trim: true),
		string(name:"SBA_NODE",    defaultValue: "${env.SBA_NODE}", description: "execution node name", trim: true)
	]),
	disableConcurrentBuilds()
])

// Get mail parameters from jenkins env vars
url           = "${env.NPM_SERVER_URL}"
npm_user      = "${env.NPM_USER}"
npm_pass      = "${env.NPM_PASS}"
npm_mail      = "${env.NPM_MAIL}"

// get job variables from job parameters
sba_version   = "${params.SBA_VERSION}"

// .npmrc variables for verdaccio connection
scope  = "@sinequa"
fnpmrc = '.npmrc'
anpmrc = ["always-auth=true", "registry=${url}/", "scope=${scope}"]


// Pipeline workflow (main)
node (params.SBA_NODE) {

	currentBuild.result = "SUCCESS"
	// no build if no package version as parameter
	if (sba_version.length() == 0) {
		echo "NO SBA_VERSION : NO Build !"
		return
	}

	try {
	
		// get the source code
		checkout scm
		
		// load jenkins functions
		def rootDir = pwd()
		def jf = load "${rootDir}/.jenkins_function.groovy"
		def currentBranch = jf.findBranchNumber()
		// sba_version : commes from sba-internal just build before 
		echo "sba_version: ${sba_version}"
		
		stage('Clean') {
			// delete dependency modules 
			def nmfolder = "node_modules"
			echo ".Rmdir /s /q ${nmfolder}"
			bat "if exist ${nmfolder} ( rmdir /s /q ${nmfolder} )"
			
			// clean the npm cache
			echo ".Cache clean force"
			bat "npm cache clean --force"
		}
		
		stage('Create user') {
			// create user for verdaccio
			bat "npm-cli-login -u ${npm_user} -p ${npm_pass} -e ${npm_mail} -r ${url} -s ${scope} --config-path ${fnpmrc}"
			// add connection infos in .npmrc file
			jf.appendFile(fnpmrc, anpmrc)
			// check the connection
			bat "npm whoami"
		}
		
		stage('Prepare') {
			// Disable all usage analytics 
			jf.ngAnalyticsOff()
		}

		// Validate app fired
		def action = jf.buildOrMerge()
		if ("${action}" != "merge") {
			// Validate app fired on merge event
			stage('Update package') {
				// update package.json with version
				jf.updatePackage(sba_version)
			}
		}

		
		// Build the app started on commit event
		stage('NPM Install') {
			bat """
				echo "npm install"
				npm install
			"""
		}
		
		stage('Build') {
			bat """
				echo "npm run build --if-present"
				npm run build --if-present
			"""
		}
	
	} catch (err) {
		currentBuild.result = "FAILURE"
		throw err
	} finally {
		// should no be blocker
		if ("${action}" == "merge") {
			currentBuild.result = "UNSTABLE"
		}
	}
}
